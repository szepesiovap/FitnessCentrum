package sk.upjs.ics.paz1c.fitnesscentrum.form;

import javax.swing.JOptionPane;
import sk.upjs.ics.paz1c.fitnesscentrum.ObjectFactory;
import sk.upjs.ics.paz1c.fitnesscentrum.RezervaciaTableModel;
import sk.upjs.ics.paz1c.fitnesscentrum.SpinningComboBoxModel;
import sk.upjs.ics.paz1c.fitnesscentrum.dao.RezervaciaDao;
import sk.upjs.ics.paz1c.fitnesscentrum.dao.SpinningDao;
import sk.upjs.ics.paz1c.fitnesscentrum.entity.Rezervacia;
import sk.upjs.ics.paz1c.fitnesscentrum.entity.Spinning;

public class SpinningForm extends javax.swing.JDialog {

    private static final int ID_COLUMN = 2;
    private final RezervaciaDao rezervaciaDao = ObjectFactory.INSTANCE.getRezervaciaDao();
    private final SpinningDao spinningDao = ObjectFactory.INSTANCE.getSpinningDao();
    private Rezervacia rezervacia;

    /**
     * Creates new form SpinningForm
     * @param parent
     * @param modal
     */
    public SpinningForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        aktualizovatRezervacie();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rezervacieScrollPane = new javax.swing.JScrollPane();
        rezervacieTable = new javax.swing.JTable();
        spinningComboBox = new javax.swing.JComboBox<>();
        spinningLabel = new javax.swing.JLabel();
        spinningMenuBar = new javax.swing.JMenuBar();
        rezervovatMenu = new javax.swing.JMenu();
        jednorazovyMenuItem = new javax.swing.JMenuItem();
        kartouMenuItem = new javax.swing.JMenuItem();
        pridatSpinningMenu = new javax.swing.JMenu();
        zrusitSpinnigMenu = new javax.swing.JMenu();
        pridatInstruktoraMenu = new javax.swing.JMenu();
        odhlasitZoSpinninguMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rezervácie na spinning");

        rezervacieTable.setModel(new RezervaciaTableModel(null));
        rezervacieScrollPane.setViewportView(rezervacieTable);

        spinningComboBox.setModel(new SpinningComboBoxModel());
        spinningComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spinningComboBoxActionPerformed(evt);
            }
        });

        spinningLabel.setText("Spinning : ");

        rezervovatMenu.setText("Rezervovať");

        jednorazovyMenuItem.setText("Jednorázový");
        jednorazovyMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jednorazovyMenuItemMousePressed(evt);
            }
        });
        rezervovatMenu.add(jednorazovyMenuItem);

        kartouMenuItem.setText("Kartou");
        kartouMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                kartouMenuItemMousePressed(evt);
            }
        });
        rezervovatMenu.add(kartouMenuItem);

        spinningMenuBar.add(rezervovatMenu);

        pridatSpinningMenu.setText("Pridať spinning");
        pridatSpinningMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pridatSpinningMenuMousePressed(evt);
            }
        });
        spinningMenuBar.add(pridatSpinningMenu);

        zrusitSpinnigMenu.setText("Zrušiť spinning");
        zrusitSpinnigMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zrusitSpinnigMenuMousePressed(evt);
            }
        });
        spinningMenuBar.add(zrusitSpinnigMenu);

        pridatInstruktoraMenu.setText("Pridať inštruktora");
        pridatInstruktoraMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pridatInstruktoraMenuMousePressed(evt);
            }
        });
        spinningMenuBar.add(pridatInstruktoraMenu);

        odhlasitZoSpinninguMenu.setText("Odhlásiť zo spinningu");
        odhlasitZoSpinninguMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                odhlasitZoSpinninguMenuMousePressed(evt);
            }
        });
        spinningMenuBar.add(odhlasitZoSpinninguMenu);

        setJMenuBar(spinningMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rezervacieScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spinningLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinningComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinningComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinningLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rezervacieScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pridatSpinningMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pridatSpinningMenuMousePressed
        new PridatSpinningForm(this, true).setVisible(true);
        ((SpinningComboBoxModel) spinningComboBox.getModel()).aktualizovat();
    }//GEN-LAST:event_pridatSpinningMenuMousePressed

    private void pridatInstruktoraMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pridatInstruktoraMenuMousePressed
        new PridatInstruktoraForm(this, true).setVisible(true);
    }//GEN-LAST:event_pridatInstruktoraMenuMousePressed

    private void kartouMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kartouMenuItemMousePressed
        try {
            Spinning spinning = (Spinning) spinningComboBox.getSelectedItem();
            if (spinning.getVolne() > 0) {
                new RezervaciaKartouForm(this, true, spinning).setVisible(true);
                aktualizovatRezervacie();
                aktualizovatSpinningy();
            } else {
                JOptionPane.showMessageDialog(this, "Tento spinning je plne obsadený!");
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Vyber spinning!");
        }

    }//GEN-LAST:event_kartouMenuItemMousePressed

    private void jednorazovyMenuItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jednorazovyMenuItemMousePressed
        try {
            Spinning spinning = (Spinning) spinningComboBox.getSelectedItem();
            if (spinning.getVolne() > 0) {
                new RezervaciaForm(this, true, spinning).setVisible(true);
                aktualizovatRezervacie();
                aktualizovatSpinningy();
            } else {
                JOptionPane.showMessageDialog(this, "Tento spinning je plne obsadený!");
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Vyber spinning!");

        }    }//GEN-LAST:event_jednorazovyMenuItemMousePressed

    private void spinningComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spinningComboBoxActionPerformed
        aktualizovatRezervacie();
    }//GEN-LAST:event_spinningComboBoxActionPerformed

    private void odhlasitZoSpinninguMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_odhlasitZoSpinninguMenuMousePressed
        try {
            Long idRezervacie = (Long) rezervacieTable.getModel().getValueAt(this.rezervacieTable.getSelectedRow(), ID_COLUMN);

            rezervacia = rezervaciaDao.dajRezervaciuSId(idRezervacie);

            if (rezervacia != null) {
                Object[] options = {"Zmazať", "Zrušiť"};
                if (JOptionPane.showOptionDialog(this, "Naozaj chcete odhlásiť zo spinningu zakaznika " + rezervacia.getZakaznik().getMeno() + "?",
                        "Zruš rezervaciu",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                        options, options[1]) == 1) {
                    return;
                }
                rezervaciaDao.odstranRezervacia(idRezervacie);
            }
            
            Spinning spinning = (Spinning)spinningComboBox.getSelectedItem();
            spinningDao.odrezervujSpinning(spinning);
            
            ((RezervaciaTableModel) rezervacieTable.getModel()).aktualizovat();
            ((SpinningComboBoxModel) spinningComboBox.getModel()).aktualizovat();

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Vyber zákazníka na odhlásenie zo spinningu.");
        }
    }//GEN-LAST:event_odhlasitZoSpinninguMenuMousePressed

    private void zrusitSpinnigMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zrusitSpinnigMenuMousePressed
        new ZrusitSpinningForm().setVisible(true);
    }//GEN-LAST:event_zrusitSpinnigMenuMousePressed

    private void aktualizovatRezervacie() {
        try {
            Spinning spinning = (Spinning) spinningComboBox.getSelectedItem();
            rezervacieTable.setModel(new RezervaciaTableModel(spinning));
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Vyber spinning!");
        }
    }

    private void aktualizovatSpinningy() {
        ((SpinningComboBoxModel) spinningComboBox.getModel()).aktualizovat();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jednorazovyMenuItem;
    private javax.swing.JMenuItem kartouMenuItem;
    private javax.swing.JMenu odhlasitZoSpinninguMenu;
    private javax.swing.JMenu pridatInstruktoraMenu;
    private javax.swing.JMenu pridatSpinningMenu;
    private javax.swing.JScrollPane rezervacieScrollPane;
    private javax.swing.JTable rezervacieTable;
    private javax.swing.JMenu rezervovatMenu;
    private javax.swing.JComboBox<Spinning> spinningComboBox;
    private javax.swing.JLabel spinningLabel;
    private javax.swing.JMenuBar spinningMenuBar;
    private javax.swing.JMenu zrusitSpinnigMenu;
    // End of variables declaration//GEN-END:variables
}
